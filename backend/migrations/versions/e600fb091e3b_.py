"""empty message

Revision ID: e600fb091e3b
Revises: af624a0e8579
Create Date: 2024-08-20 11:08:34.627116

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "e600fb091e3b"
down_revision: Union[str, None] = "af624a0e8579"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "notifications",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("is_available", sa.Boolean(), nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.drop_table("user_to_roles_association")
    op.drop_table("likes")
    op.drop_table("roles")
    op.drop_column("albums", "prod_by")
    op.add_column(
        "beatpacks", sa.Column("user_id", sa.Integer(), nullable=False)
    )
    op.create_foreign_key(None, "beatpacks", "users", ["user_id"], ["id"])
    op.drop_column("beats", "prod_by")
    op.drop_column("beats", "view_count")
    op.add_column(
        "users",
        sa.Column(
            "roles",
            sa.Enum("artist", "producer", "listener", name="role"),
            nullable=False,
        ),
    )
    op.add_column(
        "users",
        sa.Column(
            "access_level",
            sa.Enum("user", "admin", "superuser", name="accesslevel"),
            nullable=False,
        ),
    )
    op.drop_column("users", "is_active")
    op.drop_column("users", "registered_at")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "users",
        sa.Column(
            "registered_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "users",
        sa.Column(
            "is_active", sa.BOOLEAN(), autoincrement=False, nullable=True
        ),
    )
    op.drop_column("users", "access_level")
    op.drop_column("users", "roles")
    op.add_column(
        "beats",
        sa.Column(
            "view_count", sa.INTEGER(), autoincrement=False, nullable=False
        ),
    )
    op.add_column(
        "beats",
        sa.Column("prod_by", sa.VARCHAR(), autoincrement=False, nullable=True),
    )
    op.drop_constraint(None, "beatpacks", type_="foreignkey")
    op.drop_column("beatpacks", "user_id")
    op.add_column(
        "albums",
        sa.Column("prod_by", sa.VARCHAR(), autoincrement=False, nullable=True),
    )
    op.create_table(
        "roles",
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('roles_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "is_available", sa.BOOLEAN(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="roles_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "likes",
        sa.Column(
            "beat_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "is_available", sa.BOOLEAN(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["beat_id"], ["beats.id"], name="likes_beat_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="likes_pkey"),
    )
    op.create_table(
        "user_to_roles_association",
        sa.Column(
            "user_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "role_id", sa.INTEGER(), autoincrement=False, nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["roles.id"],
            name="user_to_roles_association_role_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name="user_to_roles_association_user_id_fkey",
        ),
        sa.PrimaryKeyConstraint(
            "user_id", "role_id", name="user_to_roles_association_pkey"
        ),
    )
    op.drop_table("notifications")
    # ### end Alembic commands ###
